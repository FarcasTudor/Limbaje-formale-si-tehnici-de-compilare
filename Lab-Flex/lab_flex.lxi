%{

#include <stdlib.h>
#include <string.h>

typedef struct {
	char atom[100];
	int codAtom;
	int codAtomTS;
}FIP;

typedef struct {
	char atom[100];
	int codAtomTS;
}TS;

int lenFIP = 0, lenTS = 0, codTS = 1000;
FIP fip[300];
TS ts[300];
int currentLine = 1;

void addToFIP(char atom[], int codAtom, int codAtomTS) {
	lenFIP++;
	strcpy(fip[lenFIP - 1].atom, atom);
	fip[lenFIP - 1].codAtom = codAtom;
	fip[lenFIP - 1].codAtomTS = codAtomTS;
}

void addToTS(char atom[]) {
    int i, j;
    for (i = 0; i < lenTS; i++) {
        if (strcmp(ts[i].atom, atom) == 0) {
            return;
        }
    }

    i = 0;
    while (i < lenTS && strcmp(ts[i].atom, atom) < 0) {
        i++;
    }

    lenTS++;
    for (j = lenTS; j > i; j--) {
        ts[j] = ts[j - 1];
    }

    strcpy(ts[i].atom, atom);
    ts[i].codAtomTS = codTS;
    codTS++;
}


void printFIP() {
	printf("FORMA INTERNA A PROGRAMULUI:\n");
	int i;
	for (i = 0; i < lenFIP; i++)
		if (fip[i].codAtomTS == -1)
			printf("Simbol: %s  |  Cod: %d  |  -\n", fip[i].atom, fip[i].codAtom);
		else
			printf("Simbol: %s  |  Cod: %d  |  %d\n", fip[i].atom, fip[i].codAtom, fip[i].codAtomTS);
}


void printTS() {
    printf("TABELA DE SIMBOLURI:\n");
    int i;
    for (i = 0; i < lenTS; i++) {
        printf("Simbol: %s  |  Cod: %d\n", ts[i].atom, ts[i].codAtomTS);
    }
    printf("\n");
}

%}

%option noyywrap

DIGIT 		(0b[01]+|0x[0-9a-fA-F]+|[1-9][0-9]*|0)
ID 			[a-z][a-zA-Z0-9]*
KEYWORD		int|main|for|std::cin|std::cout|double|if|while|return|else|daca|atunci|sfdaca
OPERATOR	"+"|"-"|"*"|"="|"=="|"!="|">"|"<"|"<="|">="|"/"
SEPARATOR	","|"."|";"|"("|")"|">>"|"<<"|"{"|"}"

%%

{KEYWORD} {
	int codAtom = -1;
	if (strcmp("int", yytext) == 0) codAtom = 2;
	if (strcmp("main", yytext) == 0) codAtom = 3;
	if (strcmp("std::cin", yytext) == 0) codAtom = 4;
	if (strcmp("std::cout", yytext) == 0) codAtom = 5;
	if (strcmp("if", yytext) == 0) codAtom = 6;
	if (strcmp("while", yytext) == 0) codAtom = 7;
	if (strcmp("return", yytext) == 0) codAtom = 8;
	if (strcmp("double", yytext) == 0) codAtom =9;
	if (strcmp("else", yytext) == 0) codAtom = 10;
	if (strcmp("for", yytext) == 0) codAtom = 11;
	addToFIP(yytext, codAtom, -1);
}

{ID} {
    if (yyleng <= 255) {
        addToTS(yytext);
        addToFIP(yytext, 0, codTS - 1);
    } else {
        printf("Error on line %d. Identifier is too long: %s\n", currentLine, yytext);
    }
}

{DIGIT}+ {
	addToTS(yytext);
	addToFIP(yytext, 1, codTS - 1);
}

{OPERATOR} {
	int codAtom = -1;
	if (strcmp("+", yytext) == 0) codAtom = 12;
	if (strcmp("-", yytext) == 0) codAtom = 13;
	if (strcmp("*", yytext) == 0) codAtom = 14;
	if (strcmp("=", yytext) == 0) codAtom = 15;
	if (strcmp(">", yytext) == 0) codAtom = 16;
	if (strcmp("<", yytext) == 0) codAtom = 17;
	if (strcmp(">=", yytext) == 0) codAtom = 18;
	if (strcmp("<=", yytext) == 0) codAtom = 19;
	if (strcmp("!=", yytext) == 0) codAtom = 20;
	if (strcmp("==", yytext) == 0) codAtom = 21;
	addToFIP(yytext, codAtom, -1);
}

{SEPARATOR} {
	int codAtom = -1;
	if (strcmp(",", yytext) == 0) codAtom = 22;
	if (strcmp(".", yytext) == 0) codAtom = 23;
	if (strcmp(";", yytext) == 0) codAtom = 24;
	if (strcmp("(", yytext) == 0) codAtom = 25;
	if (strcmp(")", yytext) == 0) codAtom = 26;
	if (strcmp("}", yytext) == 0) codAtom = 27;
	if (strcmp("{", yytext) == 0) codAtom = 28;
	if (strcmp("<<", yytext) == 0) codAtom = 29;
	if (strcmp(">>", yytext) == 0) codAtom = 30;
	if (strcmp("/", yytext) == 0) codAtom = 31;

	addToFIP(yytext, codAtom, -1);
}

[ \t]+  ;

[\n] { currentLine++; }

. { printf("Error on line %d. Unrecognized character: %s\n", currentLine, yytext); }

 

%% 
int main(argc, argv) 
int argc; 
char **argv; 
{ 
	++argv, --argc;
	if (argc > 0) 
		yyin = fopen(argv[0], "r"); 
	else 
		yyin = stdin; 
	yylex();
	printTS();
	printFIP();
}